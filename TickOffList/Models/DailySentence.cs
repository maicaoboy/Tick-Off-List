// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TickOffList.Models;
//
//    var dailySentence = DailySentence.FromJson(jsonString);

namespace TickOffList.Models;

using System;
using System.Collections.Generic;

using System.Globalization;
using System.Text.Json.Serialization;
using System.Text.Json;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSerializer = Newtonsoft.Json.JsonSerializer;
using JsonConverter = Newtonsoft.Json.JsonConverter;
using JsonConverterAttribute = Newtonsoft.Json.JsonConverterAttribute;
using System.Formats.Asn1;
using System.Net.Http.Json;

public partial class DailySentence
{
    [JsonProperty("id")]
    public long Id { get; set; }

    [JsonProperty("hitokoto")]
    public string Hitokoto { get; set; }

    [JsonProperty("type")]
    public string Type { get; set; }

    [JsonProperty("from")]
    public string From { get; set; }

    [JsonProperty("creator")]
    public string Creator { get; set; }

    [JsonProperty("created_at")]
    [JsonConverter(typeof(ParseStringConverter))]
    public long CreatedAt { get; set; }
}

public partial class DailySentence
{
    public static DailySentence FromJson(string json) => JsonConvert.DeserializeObject<DailySentence>(json, TickOffList.Models.Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this DailySentence self) => JsonConvert.SerializeObject(self, TickOffList.Models.Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
        {
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
    };
}

internal class ParseStringConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        long l;
        if (Int64.TryParse(value, out l))
        {
            return l;
        }
        throw new Exception("Cannot unmarshal type long");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (long)untypedValue;
        serializer.Serialize(writer, value.ToString());
        return;
    }

    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
}